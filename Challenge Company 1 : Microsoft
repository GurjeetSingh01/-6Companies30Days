150. Evaluate Reverse Polish Notation


CODE:
class Solution {
   public int evalRPN(String[] tokens) {
        Deque<Integer> nums = new ArrayDeque<>();
        
        for (String s : tokens) {
            if (s.equals("+"))       nums.push(nums.pop() + nums.pop());
            else if (s.equals("-"))  nums.push(- nums.pop() + nums.pop());
            else if (s.equals("*"))  nums.push(nums.pop() * nums.pop());
            else if (s.equals("/")) {
                int b = nums.pop(), a = nums.pop();
                nums.push(a/b);
            } else  nums.push(Integer.valueOf(s));
        }
        
        return nums.pop();
    }
}



216. Combination Sum III

CODE: 
class Solution {
     public List<List<Integer>> combinationSum3(int k, int n) {
    List<List<Integer>> ans = new ArrayList<>();
    combination(ans, new ArrayList<Integer>(), k, 1, n);
    return ans;
}

private void combination(List<List<Integer>> ans, List<Integer> comb, int k,  int start, int n) {
	if (comb.size() == k && n == 0) {
		List<Integer> li = new ArrayList<Integer>(comb);
		ans.add(li);
		return;
	}
	for (int i = start; i <= 9; i++) {
		comb.add(i);
		combination(ans, comb, k, i+1, n-i);
		comb.remove(comb.size() - 1);
	}
}
}
