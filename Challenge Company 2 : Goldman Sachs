149. Max Points on a Line

class Solution {
    public int maxPoints(int[][] points) {
        int n = points.length;
        int out = 0;
        if(n==1)
            return n;
        Map<Double, Integer> map = new HashMap<>(); // count pairs of points having same slops
       for(int i=0;i<n;i++){
           for(int j=i+1;j<n;j++){
               // if(i==j)
               //     continue;
               Double m = null; // null values as key is for vertical lines having slop = 90degree
                if(points[i][1]==points[j][1]){ // straight horizontal line
                    m = 0.0;
                } else 
                if(points[i][0]!=points[j][0]){
                    m = ((points[i][1]-points[j][1])*1.0)/(points[i][0]-points[j][0]);
                }

               
               int val = map.getOrDefault(m,1);
               map.put(m, val+1);
           }
           for(Integer val : map.values()){
               out = Math.max(out, val);
           }
           map = new HashMap<>();
       }
        return out;
    }
}



593. Valid Square

class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        int d1 = -1, d2=-1;
        int[][] points = {p1, p2, p3, p4};
        for(int i=0;i<points.length;i++){
            for(int j=i+1; j<points.length; j++){
                int dis = getDistance(points[i], points[j]);
                if(d1==-1){
                    d1 = dis;
                }else if(d2==-1 && d1!=dis){
                    d2 = dis;
                }else if(d1!=dis && d2!=dis){
                    return false;
                }
            }
        }
        return (d1==2*d2 || d2==2*d1) && d2!=-1;
    }
    
    private int getDistance(int[] p1, int[] p2){
        return ((p1[0]-p2[0])*(p1[0]-p2[0])) + ((p1[1]-p2[1])*(p1[1]-p2[1]));
    }
}


172. Factorial Trailing Zeroes
class Solution {
    public int trailingZeroes(int n) {
        int c2=0,c5=0;
        while(n>=5)
        {
            c5+=n/5;
            n=n/5;
        }
        return c5;
    }
}


447. Number of Boomerangs

class Solution {
    public int numberOfBoomerangs(int[][] points) {
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int i = 0; i < points.length; i++) {
            // clearing map for new search
            map.clear();
            for (int j = 0; j < points.length; j++) {
                // skipping the same point
                if (i == j) {
                    continue;
                }
                // calculating distance. We will compare distance^2 and get rid of Math.sqrt
                int distance = (points[j][0] - points[i][0])*(points[j][0] - points[i][0]) 
                    + (points[j][1] - points[i][1])*(points[j][1] - points[i][1]);
                // finding number of previously met points with the same distance to i point
                int size = map.getOrDefault(distance, 0);
                // adding that number * 2 to result, since j point can be either second or third point in the bumerang
                count += size++ * 2;
                // adding increased by 1 size back to map
                map.put(distance, size);
            }
        }
        return count;
    }
}



659. Split Array into Consecutive Subsequences

class Solution {
    public boolean isPossible(int[] nums) {
        
        if(nums == null || nums.length == 0)
            return false;
        
       Map<Integer,Integer> availablityMap = new HashMap<>();
       Map<Integer,Integer> virtualMap = new HashMap<>();
        
     //fill availabilty Map
     for(int i=0;i<nums.length;i++){
         availablityMap.put(nums[i],availablityMap.getOrDefault(nums[i],0)+1);
     }
        
    for(int i=0;i<nums.length;i++){
        if(availablityMap.get(nums[i]) > 0){
            //then check if part of virtual Map
            if(virtualMap.getOrDefault(nums[i],0)>0){
                virtualMap.put(nums[i],virtualMap.get(nums[i])-1);
                virtualMap.put(nums[i]+1,virtualMap.getOrDefault(nums[i]+1,0)+1);
                availablityMap.put(nums[i],availablityMap.get(nums[i])-1);
            }   
           else if(availablityMap.getOrDefault(nums[i],0) > 0 &&availablityMap.getOrDefault(nums[i]+1,0) > 0 &&                  availablityMap.getOrDefault(nums[i]+2,0) > 0){
               
               availablityMap.put(nums[i],availablityMap.get(nums[i])-1);
               availablityMap.put(nums[i]+1,availablityMap.get(nums[i]+1)-1);
               availablityMap.put(nums[i]+2,availablityMap.get(nums[i]+2)-1);
               virtualMap.put(nums[i]+3,virtualMap.getOrDefault(nums[i]+3,0)+1);
            }
            else{
                return false;
            }
            }
    }
                    
     return true;
    }
}
